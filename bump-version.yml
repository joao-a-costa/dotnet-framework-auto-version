name: Auto Bump Repo Version

on:
  push:
    branches:
      - main     # or "master"
  workflow_dispatch:

jobs:
  bump:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0   # needed for git tags

      - name: Setup Git
        run: |
          git config user.name "CI Bot"
          git config user.email "ci-bot@example.com"

      - name: Bump version, commit and tag
        shell: pwsh
        run: |
          Write-Host "========================================"
          Write-Host "üîç Starting version bump workflow"
          Write-Host "========================================"

          # Find AssemblyInfo.cs
          $assemblyInfo = Get-ChildItem -Path . -Recurse -Filter AssemblyInfo.cs | Select-Object -First 1
          if (-not $assemblyInfo) {
            Write-Error "‚ùå No AssemblyInfo.cs found!"
            exit 1
          }
          Write-Host "‚úÖ Using file: $($assemblyInfo.FullName)"

          # Read file content
          $content = Get-Content $assemblyInfo.FullName
          $regexAsm  = 'AssemblyVersion\("(\d+\.\d+\.\d+\.\d+)"\)'
          $regexFile = 'AssemblyFileVersion\("(\d+\.\d+\.\d+\.\d+)"\)'

          # Prefer AssemblyFileVersion for parsing
          $match = [regex]::Match(($content -join "`n"), $regexFile)
          if (-not $match.Success) { $match = [regex]::Match(($content -join "`n"), $regexAsm) }
          if (-not $match.Success) {
            Write-Error "‚ùå Could not extract version!"
            exit 1
          }

          # Parse numbers
          $major, $minor, $patch, $build = $match.Groups[1].Value -split '\.'
          $patch = [int]$patch + 1

          # Rules: AssemblyVersion ends with .0 | AssemblyFileVersion ends with .1
          $assemblyVersion = "$major.$minor.$patch.0"
          $fileVersion     = "$major.$minor.$patch.1"

          Write-Host "üî¢ Current version: $($match.Groups[1].Value)"
          Write-Host "‚û°Ô∏è  New AssemblyVersion: $assemblyVersion"
          Write-Host "‚û°Ô∏è  New AssemblyFileVersion: $fileVersion"

          # Replace both
          $content = $content -replace $regexAsm,  "AssemblyVersion(`"$assemblyVersion`")"
          $content = $content -replace $regexFile, "AssemblyFileVersion(`"$fileVersion`")"
          Set-Content $assemblyInfo.FullName $content
          Write-Host "‚úçÔ∏è Updated AssemblyInfo.cs"

          # Git operations
          git pull
          git add $assemblyInfo

          # Prevent empty commits
          if (git diff --cached --quiet) {
            Write-Host "‚ö†Ô∏è No changes detected, skipping commit and tag."
            exit 0
          }

          git commit -m "v$fileVersion"
          git push
          Write-Host "‚úÖ Committed v$fileVersion"

          git tag -a "v$fileVersion" -m "v$fileVersion"
          git push --tags
          Write-Host "üè∑Ô∏è Tagged v$fileVersion"

          Write-Host "========================================"
          Write-Host "‚úÖ Version bump complete!"
          Write-Host "========================================"
